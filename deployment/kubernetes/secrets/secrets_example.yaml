# Secrets are used to store sensitive information that may be used by multiple microservices.
---
apiVersion: v1
kind: Secret
metadata:
  name: example-secrets
type: Opaque # There are other types, Opaque is for generic secrets. Other types are for specific kinds of secrets such as tokens or ssh keys.
data:
  # The below key-value pairs can be changed to anything you want.
  # Secrets differ from config-maps because 1) They MUST be stored (in the yaml) in base64, and 2) they can be encrypted - though I haven't worked out how to do this programmatically yet.
  
  # This is a simple string. If to be used as an env var, the name should follow env var naming convention (i.e. use UPPER_CASE).
  # The below secret is: this is a decoded secret
  SINGLE_STRING_EXAMPLE: dGhpcyBpcyBhIGRlY29kZWQgc2VjcmV0
  
  
  # Because everthing is base64 encoded, entire files can be stored as a single long string like example 2.
  # These should follow k8s naming convention (i.e. kebab-case).
  # The below secret is:
  # {
  #     "This": "is",
  #     "an": "example",
  #     "of": "how",
  #     "JSON": "can",
  #     "be": "stored"
  # }
  encoded-file-example: ewogICAgICAiVGhpcyI6ICJpcyIsCiAgICAgICJhbiI6ICJleGFtcGxlIiwKICAgICAgIm9mIjogImhvdyIsCiAgICAgICJKU09OIjogImNhbiIsCiAgICAgICJiZSI6ICJzdG9yZWQiCn0=

  # NOTE: Because secrets are by definition sensitive information, do not use an online base64 encoder. Instead in terminal do: echo -n "this is a secret to be encoded" | base64 -w 0
